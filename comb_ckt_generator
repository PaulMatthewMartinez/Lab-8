//============================================================================
// comb_ckt_generator.v
//
// This code is generated by Terasic System Builder
// and modified by M. Hildebrand and B. Baas
//
// 2018/02/05 First version
// 2018/04/24 Routed all board-level switches and LEDs to and from this module
//============================================================================

module comb_ckt_generator (
   // VGA-related signals
	vsync,
	clock,
   col,
   row,
   red,
   green,
   blue,
   // input push buttons and switches
   KEY,
   SW,
   // output LEDs and 7-segment displays
   LEDR,
   HEX0,
   HEX1,
   HEX2,
   HEX3,
   HEX4,
   HEX5
   );
//input reset;
input vsync;	
input clock;
input  [9:0]  col;
input  [8:0]  row;
output [3:0]  red;    // 4-bit color output
output [3:0]  green;  // 4-bit color output
output [3:0]  blue;   // 4-bit color output

// input push buttons and switches
input  [1:0]  KEY;    // two board-level push buttons KEY1 - KEY0
input  [9:0]  SW;     // ten board-level switches SW9 - SW0

// output LEDs and 7-segment displays
output [9:0]  LEDR;   // ten board-level LEDs LEDR9 - LEDR0
output [7:0]  HEX0;   // board-level 7-segment display
output [7:0]  HEX1;   // board-level 7-segment display
output [7:0]  HEX2;   // board-level 7-segment display
output [7:0]  HEX3;   // board-level 7-segment display
output [7:0]  HEX4;   // board-level 7-segment display
output [7:0]  HEX5;   // board-level 7-segment display


//============================================================================
//  reg/wire declarations
//============================================================================
// More complex implementations will likely declare RGB outputs as regs
// rather than wires
reg [3:0]    red, green, blue;   
reg[11:0] divby_c0,divby_c1,divby_c2,divby_c3;
reg [11:0] divby0,divby1,divby2,divby3;
wire[3:0] dataoutred0,dataoutgrn0,dataoutbo0;
wire[3:0] dataoutred1,dataoutgrn1,dataoutbo1;
wire[3:0] dataoutred2,dataoutgrn2,dataoutbo2;
wire[3:0] dataoutred3,dataoutgrn3,dataoutbo3;   
reg[2:0] zoom;
reg[11:0] pixelbuffer,pixelbuffer_c;//1 pixel = 12 bits.
wire[11:0] color0,color1,color2,color3; //for pixelbuffer
reg[3:0] luma,luma_c;//final FF stage
reg[3:0] redy,bluey,greeny,redy_1,bluey_1,greeny_1;//FF before multiplier
reg[3:0] multi_red, multi_blue,multi_green,red_add,blue_add,green_add;//FF before adder.
reg[3:0] dred_c1,dred1,dgreen_c1,dgreen1,dblue_c1,dblue1;//FF delay1
reg[3:0] dred_c2,dred2,dgreen_c2,dgreen2,dblue_c2,dblue2;//FF delay2
reg[3:0]  redg_1,blueg_1,greeng_1,unredg_1,unblueg_1,ungreeng_1;
reg advpix;

//===========================================================================
// Board-LED related circuits
//============================================================================

// Temporary simple logic
// The 10 LEDs will light depending on the position of the adjacent 10 switches
assign LEDR = SW;      // ten LEDs assigned to ten switches

// Temporary simple logic
// This block sets the 7-segment HEX displays
// HEX4 - HEX0 are set to all dark
// HEX5 lights segments based on SW9 - SW2
assign HEX0 = 8'b1111_1111;
assign HEX1 = 8'b1111_1111;
assign HEX2 = 8'b1111_1111;
assign HEX3 = 8'b1111_1111;
assign HEX4 = 8'b1111_1111;
assign HEX5 = ~{SW[9], SW[8], SW[7], SW[6], SW[5], SW[4], SW[3], SW[2]};


//==============================================================
// VGA display related circuits
//==============================================================

red r0(
.addressred0(divby0),
.addressred1(divby1),
.addressred2(divby2),
.addressred3(divby3), 
.clockr(clock), 
.redout3(dataoutred3), 
.redout2(dataoutred2),
.redout1(dataoutred1),
.redout0(dataoutred0)
);

green g0(
.addressgreen0(divby0),
.addressgreen1(divby1),
.addressgreen2(divby2),
.addressgreen3(divby3),
.clockg(clock), 
.greenout3(dataoutgrn3),
.greenout2(dataoutgrn2),
.greenout1(dataoutgrn1),
.greenout0(dataoutgrn0)
);

blue b0(
.addressblue0(divby0),
.addressblue1(divby1),
.addressblue2(divby2),
.addressblue3(divby3),
.clockb(clock), 
.blueout3(dataoutbo3),
.blueout2(dataoutbo2),
.blueout1(dataoutbo1),
.blueout0(dataoutbo0)
);

assign color0 = {dataoutred0,dataoutgrn0,dataoutbo0};
assign color1 = {dataoutred1,dataoutgrn1,dataoutbo1};
assign color2 = {dataoutred2,dataoutgrn2,dataoutbo2};
assign color3 = {dataoutred3,dataoutgrn3,dataoutbo3};


always@(posedge clock)begin
if(vsync)begin
advpix=1'b1;
end
else begin
advpix=1'b10;
end
pixelbuffer <= #1 pixelbuffer_c;

greeny_1 <= #1 greeny;//FF before multiplier
redy_1 <= #1 redy;//FF before multiplier
bluey_1 <= #1 bluey;//FF before multiplier

red_add <= #1 multi_red;//FF before adder.
blue_add <= #1 multi_blue;//FF before adder.
green_add <= #1 multi_green;//FF before adder.

luma <=#1 luma_c;//final FF stage

dred1 <= #1 redy_1;//FF delay 1
dblue1 <= #1 bluey_1;
dgreen1 <= #1 greeny_1;

dred1 <= #1 dred2;// FF delay 2
dblue1 <= #1 dblue2;
dgreen1 <= #1 dgreen2;

divby0 <= #1 divby_c0;//counter0
divby1 <= #1 divby_c1;//counter1
divby2 <= #1 divby_c2;//counter2
divby3 <= #1 divby_c3;//counter3
/*
redg_1<=redy_1;
blueg_1<=bluey_1;
greeng_1<=greeny_1;
unredg_1<=redg_1;
unblueg_1<=blueg_1;
ungreeng_1<=greeng_1;
*/
end


always@(*)begin
//if (reset==KEY[0])begin
//divby_c0=12'b000000_000000;
//divby_c1=12'b000000_000000;
//divby_c2=12'b000000_000000;
//divby_c3=12'b000000_000000;
//red=0;
//green=0;
//blue=0;
//end
pixelbuffer_c=pixelbuffer;

bluey=bluey_1;
greeny=greeny_1;
redy=redy_1;

multi_red=red_add;
multi_blue=blue_add;
multi_green=green_add;

luma_c=luma;

dred1=redy_1;
dgreen1=greeny_1;
dblue1=bluey_1;

dred2=dred1;
dblue2=dblue1;
dgreen2=dgreen1;
//dred_c1=dred1;
//dblue_c1=dblue1;
//dgreen_c1=dgreen1;
//
//dred_c2=dred2;
//dblue_c2=dblue2;
//dgreen_c2=dgreen2;

divby_c0=divby0;
divby_c1=divby1;
divby_c2=divby2;
divby_c3=divby3;

case(SW[9:8])
2'b00:begin zoom=3'b001; end
2'b01:begin zoom=3'b010; end
2'b10:begin zoom=3'b011; end
2'b11:begin zoom=3'b100; end
endcase
if(advpix)begin
	redy=4'b0000;
	bluey=4'b0000;
	greeny=4'b0000;
			if((col>=10'd0*zoom)&&(col<=10'd127*zoom)&&(row>=9'd0*zoom)&&(row<=((9'd32*zoom)-1)))begin//row(0:31),col(0:127)
				
				if(!((col)%zoom))begin
				redy=dataoutred0;   
				greeny=dataoutgrn0;
				bluey=dataoutbo0;
				pixelbuffer_c=color0;
				//divby_c0=divby0+12'd1;
				//divby0=(row*128)+col;
				divby_c0=((row/zoom)*128)+(col/zoom);
				
						
				end
				else begin
				redy=pixelbuffer_c[11:8];
				greeny=pixelbuffer_c[7:4];
				bluey=pixelbuffer_c[3:0];
				end
				
			end

			 if((col>=10'd0*zoom)&&(col<=10'd127*zoom)&&(row>=9'd32*zoom)&&(row<=((9'd64*zoom)-1)))begin//row(31:63),col(0:127)
				
				if(!((col)%zoom))begin
				redy=dataoutred1;
				greeny=dataoutgrn1;
				bluey=dataoutbo1;
				pixelbuffer_c=color1;
					
				//divby_c1 =divby1+12'd1;
				//divby1=(row*128)+col;
				divby_c1=((row/zoom)*128)+(col/zoom);
				
						
						
				end
				else begin
				redy=pixelbuffer_c[11:8];
				greeny=pixelbuffer_c[7:4];
				bluey=pixelbuffer_c[3:0];
				end
				
			end

			 if((col>=10'd0*zoom)&&(col<=10'd127*zoom)&&(row>=9'd64*zoom)&&(row<=((9'd96*zoom)-1)))begin//row(63:95),col(0:127)
				
				if(!((col)%zoom))begin
				redy=dataoutred2;
				greeny=dataoutgrn2;
				bluey=dataoutbo2;
				pixelbuffer_c=color2;
				//divby_c2 =divby2+12'd1;
				//divby2=(row*128)+col;
				divby_c2=((row/zoom)*128)+(col/zoom);
				
						
				end
				else begin
				redy=pixelbuffer_c[11:8];
				greeny=pixelbuffer_c[7:4];
				bluey=pixelbuffer_c[3:0];
				end
				
			end

			 if((col>=10'd0*zoom)&&(col<=10'd127*zoom)&&(row>=9'd96*zoom)&&(row<=((9'd128*zoom)-1)))begin//row(95:127),col(0:127)

				if(!((col)%zoom))begin
				redy=dataoutred3;
				greeny=dataoutgrn3;
				bluey=dataoutbo3;
				pixelbuffer_c=color3;
				//divby_c3=divby3+12'd1;
				//divby3=(row*128)+col;
				divby_c3=((row/zoom)*128)+(col/zoom);
				
						
				end
				else begin
				redy=pixelbuffer_c[11:8];
				greeny=pixelbuffer_c[7:4];
				bluey=pixelbuffer_c[3:0];
				end
				
			end
			
//switches-------------------------------------------------------
						if(SW[7]==1)begin
							redy=4'b0000;
						end
					

						if(SW[6]==1)begin
							greeny=4'b0000;
						end
						

						if(SW[5]==1)begin
							bluey=4'b0000;
						end
					
						
							//luma=(0.2126*red)+(0.7152*green)+(0.0722*blue)
							multi_red=(2126)*redy;
							multi_green=(7152)*greeny;
							multi_blue=(722)*bluey;
							
							luma_c=((red_add+green_add+blue_add)/10000);
							red=dred1;
							blue=dblue1;
							green=dgreen1;
						if(SW[4]==1&&advpix)begin	
							red=luma;
							green=luma;
							blue=luma;
						end
						
end
end


endmodule
